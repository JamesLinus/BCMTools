# polylib_search_nearest.patch
# 2012/09/01 suzuro@iis.u-tokyo.ac.jp
#
# PolylibクラスとMPIPolylibクラスに、指定した点に最も近いポリゴンを
# 検索するsearch_nearestメソッドを追加。
# Polylib_2_0_3_Relで動作確認。
#
# パッチの当て方:
# Polylibを展開してできたディレクトリに降りて、
#   patch -p1 < このファイル
#
diff -ur Polylib_2_0_3_Rel.old/include/Polylib.h Polylib_2_0_3_Rel/include/Polylib.h
--- Polylib_2_0_3_Rel.old/include/Polylib.h	2010-11-26 16:23:59.000000000 +0900
+++ Polylib_2_0_3_Rel/include/Polylib.h	2012-09-01 16:38:38.000000000 +0900
@@ -180,6 +180,18 @@
 		bool			every
 	) const;
 
+
+	///
+	/// 指定した点に最も近い三角形ポリゴンの検索。
+	///
+	///  @return	検索されたポリゴン
+	///
+	const Triangle* search_nearest_polygon(
+		std::string	group_name, 
+		const Vec3f&	pos
+	) const;
+
+
 	///
 	/// 引数のグループ名が既存グループと重複しないかチェック。
 	///
Only in Polylib_2_0_3_Rel/include: Polylib.h.org
diff -ur Polylib_2_0_3_Rel.old/include/groups/PolygonGroup.h Polylib_2_0_3_Rel/include/groups/PolygonGroup.h
--- Polylib_2_0_3_Rel.old/include/groups/PolygonGroup.h	2012-04-22 10:46:56.000000000 +0900
+++ Polylib_2_0_3_Rel/include/groups/PolygonGroup.h	2012-09-01 16:29:38.000000000 +0900
@@ -212,6 +212,16 @@
 	) const;
 
 	///
+	/// KD木探索により、指定位置に最も近いポリゴンを検索する。
+	///
+	///  @param[in]		pos		指定位置
+	///  @return	検索されたポリゴン
+	///
+	const PrivateTriangle* search_nearest(
+		const Vec3f&	pos
+	) const;
+
+	///
 	/// PolygonGroupのフルパス名を取得する。
 	///
 	///  @return フルパス名。
Only in Polylib_2_0_3_Rel/include/groups: PolygonGroup.h.org
diff -ur Polylib_2_0_3_Rel.old/include/polygons/Polygons.h Polylib_2_0_3_Rel/include/polygons/Polygons.h
--- Polylib_2_0_3_Rel.old/include/polygons/Polygons.h	2010-10-27 18:44:33.000000000 +0900
+++ Polylib_2_0_3_Rel/include/polygons/Polygons.h	2012-09-01 16:37:11.000000000 +0900
@@ -144,6 +144,16 @@
 		std::vector<PrivateTriangle*>	*tri_list
 	) const = 0;
 
+	///
+	/// KD木探索により、指定位置に最も近いポリゴンを検索する。
+	///
+	///  @param[in]		pos		指定位置
+	///  @return	検索されたポリゴン
+	///
+	virtual const PrivateTriangle* search_nearest(
+		const Vec3f&	pos
+	) const = 0;
+
 	//=======================================================================
 	// Setter/Getter
 	//=======================================================================
Only in Polylib_2_0_3_Rel/include/polygons: Polygons.h.org
diff -ur Polylib_2_0_3_Rel.old/include/polygons/TriMesh.h Polylib_2_0_3_Rel/include/polygons/TriMesh.h
--- Polylib_2_0_3_Rel.old/include/polygons/TriMesh.h	2010-10-27 18:44:35.000000000 +0900
+++ Polylib_2_0_3_Rel/include/polygons/TriMesh.h	2012-09-01 16:31:45.000000000 +0900
@@ -142,6 +142,16 @@
 		std::vector<PrivateTriangle*>	*tri_list
 	) const;
 
+	///
+	/// KD木探索により、指定位置に最も近いポリゴンを検索する。
+	///
+	///  @param[in]		pos		指定位置
+	///  @return 検索されたポリゴン
+	///
+	const PrivateTriangle* search_nearest(
+		const Vec3f&	pos
+	) const;
+
 	//=======================================================================
 	// Setter/Getter
 	//=======================================================================
Only in Polylib_2_0_3_Rel/include/polygons: TriMesh.h.org
diff -ur Polylib_2_0_3_Rel.old/include/polygons/VTree.h Polylib_2_0_3_Rel/include/polygons/VTree.h
--- Polylib_2_0_3_Rel.old/include/polygons/VTree.h	2010-10-27 18:44:39.000000000 +0900
+++ Polylib_2_0_3_Rel/include/polygons/VTree.h	2012-09-01 16:36:12.000000000 +0900
@@ -326,6 +326,28 @@
 	) const;
 
 	///
+	/// KD木探索により、指定位置に最も近いポリゴンを検索する。
+	///
+	///  @param[in]		pos		指定位置
+	///  @return	検索されたポリゴン
+	///
+	const PrivateTriangle* search_nearest(
+		const Vec3f&	pos
+	) const;
+
+	///
+	/// KD木探索により、指定位置に最も近いポリゴンを検索する。
+	///
+	///  @param[in]		vn		検索対象のノードへのポインタ。
+	///  @param[in]		pos		指定位置
+	///  @return	検索されたポリゴン
+	///
+	const PrivateTriangle* search_nearest_recursive(
+		VNode		*vn, 
+		const Vec3f&	pos
+	) const;
+
+	///
 	/// KD木クラスが利用しているメモリ量を返す。
 	///
 	///  @return	利用中のメモリ量(byte)
Only in Polylib_2_0_3_Rel/include/polygons: VTree.h.org
diff -ur Polylib_2_0_3_Rel.old/src/Polylib.cxx Polylib_2_0_3_Rel/src/Polylib.cxx
--- Polylib_2_0_3_Rel.old/src/Polylib.cxx	2010-11-19 16:49:11.000000000 +0900
+++ Polylib_2_0_3_Rel/src/Polylib.cxx	2012-09-01 16:45:43.000000000 +0900
@@ -312,6 +312,55 @@
 	return NULL;
 }
 
+// public /////////////////////////////////////////////////////////////////////
+const Triangle* Polylib::search_nearest_polygon(
+        string		group_name, 
+	const Vec3f&    pos
+) const {
+
+	PolygonGroup* pg = get_group(group_name);
+	if (pg == 0) {
+		PL_ERROSH << "[ERROR]Polylib::search_polygons():Group not found: " 
+				  << group_name << endl;
+		return 0;
+	}
+
+	vector<PolygonGroup*>* pg_list2 = new vector<PolygonGroup*>;
+
+	//子孫を検索
+	search_group(pg, pg_list2);
+
+	//自身を追加
+	pg_list2->push_back(pg);
+
+        const PrivateTriangle* tri_min = 0;
+        float dist2_min = 0.0;
+
+	//対象ポリゴングループ毎に検索
+	vector<PolygonGroup*>::iterator it;
+	for (it = pg_list2->begin(); it != pg_list2->end(); it++) {
+		//リーフポリゴングループからのみ検索を行う
+		if ((*it)->get_children().size()==0) {
+	                const PrivateTriangle* tri = (*it)->search_nearest(pos);
+	                if (tri) {
+	                        Vec3f* v = tri->get_vertex();
+	                        Vec3f c((v[0][0]+v[1][0]+v[2][0])/3.0,
+	                                (v[0][1]+v[1][1]+v[2][1])/3.0,
+	                                (v[0][2]+v[1][2]+v[2][2])/3.0);
+	                        float dist2 = (c - pos).lengthSquared();
+                                if (tri_min == 0 || dist2 < dist2_min) {
+	                                tri_min = tri;
+	                                dist2_min = dist2;
+	                        }
+	                }
+                }
+        }
+
+	delete pg_list2;
+
+	return (const Triangle*)tri_min;
+}
+
 // protected //////////////////////////////////////////////////////////////////
 Polylib::Polylib()
 {
Only in Polylib_2_0_3_Rel/src: Polylib.cxx.org
Only in Polylib_2_0_3_Rel/src/c_lang: CPolylib.cxx.org
Only in Polylib_2_0_3_Rel/src: depend.inc
Only in Polylib_2_0_3_Rel/src/file_io: PolylibConfig.cxx.org
Only in Polylib_2_0_3_Rel/src/file_io: TriMeshIO.cxx.org
Only in Polylib_2_0_3_Rel/src/file_io: stl.cxx.org
Only in Polylib_2_0_3_Rel/src/file_io: triangle_id.cxx.org
diff -ur Polylib_2_0_3_Rel.old/src/groups/PolygonGroup.cxx Polylib_2_0_3_Rel/src/groups/PolygonGroup.cxx
--- Polylib_2_0_3_Rel.old/src/groups/PolygonGroup.cxx	2012-09-01 17:18:05.000000000 +0900
+++ Polylib_2_0_3_Rel/src/groups/PolygonGroup.cxx	2012-09-01 16:48:02.000000000 +0900
@@ -475,6 +475,13 @@
 	return (int)tmp_list->size();
 }// add keno 20120331
 
+// public /////////////////////////////////////////////////////////////////////
+const PrivateTriangle* PolygonGroup::search_nearest(
+	const Vec3f&    pos
+) const {
+        return m_polygons->search_nearest(pos);
+}
+
 // protected //////////////////////////////////////////////////////////////////
 POLYLIB_STAT PolygonGroup::setup_attribute (
 	Polylib					*polylib,
Only in Polylib_2_0_3_Rel/src/groups: PolygonGroup.cxx.org
diff -ur Polylib_2_0_3_Rel.old/src/polygons/TriMesh.cxx Polylib_2_0_3_Rel/src/polygons/TriMesh.cxx
--- Polylib_2_0_3_Rel.old/src/polygons/TriMesh.cxx	2010-10-27 18:45:30.000000000 +0900
+++ Polylib_2_0_3_Rel/src/polygons/TriMesh.cxx	2012-09-01 16:49:21.000000000 +0900
@@ -267,6 +267,13 @@
 	return PLSTAT_OK;
 }
 
+// public /////////////////////////////////////////////////////////////////////
+const PrivateTriangle* TriMesh::search_nearest(
+	const Vec3f&    pos
+) const {
+        return m_vtree->search_nearest(pos);
+}
+
 // private ////////////////////////////////////////////////////////////////////
 void TriMesh::init_tri_list()
 {
Only in Polylib_2_0_3_Rel/src/polygons: TriMesh.cxx.org
diff -ur Polylib_2_0_3_Rel.old/src/polygons/VTree.cxx Polylib_2_0_3_Rel/src/polygons/VTree.cxx
--- Polylib_2_0_3_Rel.old/src/polygons/VTree.cxx	2010-10-27 18:45:35.000000000 +0900
+++ Polylib_2_0_3_Rel/src/polygons/VTree.cxx	2012-09-01 16:50:46.000000000 +0900
@@ -304,6 +304,64 @@
 	return size;
 }
 
+// public /////////////////////////////////////////////////////////////////////
+const PrivateTriangle* VTree::search_nearest(
+	const Vec3f&    pos
+) const {
+	if (m_root == 0) {
+		cerr << "Polylib::vtree::Error" << endl;
+		return 0;
+	}
+
+        return search_nearest_recursive(m_root, pos);
+}
+
+// public /////////////////////////////////////////////////////////////////////
+const PrivateTriangle* VTree::search_nearest_recursive(
+        VNode           *vn,
+	const Vec3f&    pos
+) const {
+        if (vn->is_leaf()) {
+                const PrivateTriangle* tri_min = 0;
+                float dist2_min = 0.0;
+
+                // ノード内のポリゴンから最も近い物を探す(リニアサーチ)
+	        vector<VElement*>::const_iterator itr = vn->get_vlist().begin();
+        	for (; itr != vn->get_vlist().end(); itr++) {
+                        const PrivateTriangle* tri = (*itr)->get_triangle();
+	                const Vec3f *v = tri->get_vertex();
+                        Vec3f c((v[0][0]+v[1][0]+v[2][0])/3.0,
+                                (v[0][1]+v[1][1]+v[2][1])/3.0,
+                                (v[0][2]+v[1][2]+v[2][2])/3.0);
+                        float dist2 = (c - pos).lengthSquared();
+                        if (tri_min == 0 || dist2 < dist2_min) {
+                                tri_min = tri;
+                                dist2_min = dist2;
+                        }
+                }
+                return tri_min;  // 要素数が0の場合は，0が返る
+        } else {
+                // 基準点が存在する方のサイドから検索
+                VNode *vn1, *vn2;
+	        AxisEnum axis = vn->get_axis();
+                if (pos[axis] < (vn->get_left()->get_bbox()).max[axis]) {
+                        vn1 = vn->get_left();
+                        vn2 = vn->get_right();
+                } else {
+                        vn1 = vn->get_right();
+                        vn2 = vn->get_left();
+                }
+                const PrivateTriangle* tri = search_nearest_recursive(vn1, pos);
+                if (tri) {
+                        // 近い方のサイドにポリゴンがあったら，そのままリターン
+                        return tri;
+                } else {
+                        // もしなかったら，逆サイドを検索
+                        return search_nearest_recursive(vn2, pos);
+                }
+        }
+}
+
 // private ////////////////////////////////////////////////////////////////////
 void VTree::traverse(VNode* vn, VElement* elm, VNode** vnode) const
 {
Only in Polylib_2_0_3_Rel/src/polygons: VTree.cxx.org
